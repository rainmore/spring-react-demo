-- Create a read-only (select) user to view database state in running application.
-- DROP USER IF EXISTS guest;
-- CREATE USER guest PASSWORD 'guest';

-- The default schema in H2 is 'PUBLIC'.
GRANT SELECT ON SCHEMA PUBLIC TO guest;

DROP TABLE IF EXISTS USER_ACCOUNTS_PERMISSIONS CASCADE;
DROP TABLE IF EXISTS USER_ROLES_PERMISSIONS CASCADE;
DROP TABLE IF EXISTS USER_PERMISSIONS CASCADE;

CREATE TABLE USER_PERMISSIONS
(
    ID          IDENTITY     NOT NULL COMMENT 'A surrogate primary key id, instead of the name.' PRIMARY KEY,
    NAME        VARCHAR(250) NOT NULL COMMENT 'A unique name of the user permission.' UNIQUE CHECK REGEXP_LIKE(NAME, '^[0-9a-z.]{2,250}$'),
    PARENT_ID   INTEGER      NULL COMMENT 'The parent of user permission.',
    DESCRIPTION VARCHAR(255) NULL COMMENT 'A description describing the user permission.',
    CREATED_AT  TIMESTAMP(9) WITHOUT TIME ZONE NOT NULL COMMENT 'A timestamp when the user permission is created.'
);
COMMENT ON TABLE USER_PERMISSIONS IS 'User permissions';
CREATE INDEX USER_PERMISSIONS_NAME_INDEX ON USER_PERMISSIONS (NAME);
CREATE INDEX USER_PERMISSIONS_PARENT_ID_INDEX ON USER_PERMISSIONS (PARENT_ID);
CREATE INDEX USER_PERMISSIONS_CREATED_AT_INDEX ON USER_PERMISSIONS (CREATED_AT);

CREATE TABLE USER_ROLES
(
    ID          IDENTITY     NOT NULL COMMENT 'A surrogate primary key id, instead of the name.' PRIMARY KEY,
    NAME        VARCHAR(250) NOT NULL COMMENT 'A unique name of the user role.' UNIQUE CHECK REGEXP_LIKE(NAME, '^[0-9a-zA-Z -]{2,250}$'),
    PARENT_ID   INTEGER      NULL COMMENT 'The parent of user role.',
    DESCRIPTION VARCHAR(255) NULL COMMENT 'A description describing the user role.',
    CREATED_AT  TIMESTAMP(9) WITHOUT TIME ZONE NOT NULL COMMENT 'A timestamp when the user role is created.'
);
COMMENT ON TABLE USER_ROLES IS 'User permissions';
CREATE INDEX USER_ROLES_NAME_INDEX ON USER_ROLES (NAME);
CREATE INDEX USER_ROLES_PARENT_ID_INDEX ON USER_ROLES (PARENT_ID);
CREATE INDEX USER_ROLES_CREATED_AT_INDEX ON USER_ROLES (CREATED_AT);

CREATE TABLE USER_ROLES_PERMISSIONS
(
    ROLE_ID       INTEGER NOT NULL COMMENT 'The id of the user role.',
    PERMISSION_ID INTEGER NOT NULL COMMENT 'The id of the user permission.'
);
CREATE INDEX USER_ROLES_PERMISSIONS_ROLE_ID_PERMISSION_ID ON USER_ROLES_PERMISSIONS (ROLE_ID, PERMISSION_ID);


DROP TABLE IF EXISTS USER_ACCOUNTS CASCADE;
CREATE TABLE USER_ACCOUNTS
(
    ID             IDENTITY     NOT NULL COMMENT 'A surrogate primary key id, instead of the name.' PRIMARY KEY,
    FIRSTNAME      VARCHAR(150) NOT NULL COMMENT 'The first name of the user account.',
    LASTNAME       VARCHAR(150) NOT NULL COMMENT 'The last name of the user account.',
    EMAIL          VARCHAR(250) NOT NULL COMMENT 'The email of the user account.',
    PASSWORD       VARCHAR(250) NOT NULL COMMENT 'The password of the user account.',
    ACCOUNT_STATUS ENUM('ACTIVE', 'DISABLED', 'SUSPENDED')  NOT NULL COMMENT 'The last name of the user account.',
    LAST_LOGIN_AT  TIMESTAMP(9) NULL COMMENT 'The last login at timestamp of the user account.',
    CREATED_AT     TIMESTAMP(9) WITHOUT TIME ZONE NOT NULL COMMENT 'A timestamp when the book category is created.'
);
COMMENT ON TABLE USER_ACCOUNTS IS 'User account';
CREATE INDEX USER_ACCOUNTS_FIRSTNAME_INDEX ON USER_ACCOUNTS (FIRSTNAME);
CREATE INDEX USER_ACCOUNTS_LASTNAME_INDEX ON USER_ACCOUNTS (LASTNAME);
CREATE INDEX USER_ACCOUNTS_EMAIL_INDEX ON USER_ACCOUNTS (EMAIL);
CREATE INDEX USER_ACCOUNTS_PASSWORD_INDEX ON USER_ACCOUNTS (PASSWORD);
CREATE INDEX USER_ACCOUNTS_ACCOUNT_STATUS_INDEX ON USER_ACCOUNTS (ACCOUNT_STATUS);
CREATE INDEX USER_ACCOUNTS_CREATED_AT_INDEX ON USER_ACCOUNTS (CREATED_AT);

CREATE TABLE USER_ACCOUNTS_ROLES
(
    ACCOUNT_ID INTEGER NOT NULL COMMENT 'The id of the user account.',
    ROLE_ID    INTEGER NOT NULL COMMENT 'The id of the user role.'
);
CREATE INDEX USER_ACCOUNTS_ROLES_ACCOUNT_ID_ROLE_ID ON USER_ACCOUNTS_ROLES (ACCOUNT_ID, ROLE_ID);

CREATE TABLE USER_ACCOUNTS_PERMISSIONS
(
    ACCOUNT_ID    INTEGER NOT NULL COMMENT 'The id of the user account.',
    PERMISSION_ID INTEGER NOT NULL COMMENT 'The id of the user permission.'
);
CREATE INDEX USER_ACCOUNTS_PERMISSIONS_ACCOUNT_ID_PERMISSION_ID ON USER_ACCOUNTS_PERMISSIONS (ACCOUNT_ID, PERMISSION_ID);

DROP TABLE IF EXISTS BOOK_CATEGORIES CASCADE;
CREATE TABLE BOOK_CATEGORIES
(
    ID          IDENTITY     NOT NULL COMMENT 'A surrogate primary key id, instead of the name.' PRIMARY KEY,
    NAME        VARCHAR(250) NOT NULL COMMENT 'A unique name of the book category.' UNIQUE CHECK REGEXP_LIKE(NAME, '^[0-9a-zA-Z -]{2,250}$'),
    PARENT_ID   INTEGER      NULL COMMENT 'The parent book category.',
    DESCRIPTION VARCHAR(255) NULL COMMENT 'A description describing the book category.',
    CREATED_AT  TIMESTAMP(9) WITHOUT TIME ZONE NOT NULL COMMENT 'A timestamp when the book category is created.'
);
COMMENT ON TABLE BOOK_CATEGORIES IS 'Book Category';
CREATE INDEX BOOK_CATEGORIES_NAME_INDEX ON BOOK_CATEGORIES (NAME);
CREATE INDEX BOOK_CATEGORIES_PARENT_ID_INDEX ON BOOK_CATEGORIES (PARENT_ID);
CREATE INDEX BOOK_CATEGORIES_CREATED_AT_INDEX ON BOOK_CATEGORIES (CREATED_AT);

DROP TABLE IF EXISTS BOOK_AUTHORS CASCADE;
DROP TABLE IF EXISTS BOOKS CASCADE;
CREATE TABLE BOOKS
(
    ID               IDENTITY     NOT NULL COMMENT 'A surrogate primary key id, instead of the name.' PRIMARY KEY,
    NAME             VARCHAR(250) NOT NULL COMMENT 'The name of the book.',
    CATEGORY_ID      INTEGER      NOT NULL COMMENT 'The category of the book.',
    PUBLICATION_DATE DATE         NOT NULL COMMENT 'A publish date of the book.',
    CREATED_AT       TIMESTAMP(9) WITHOUT TIME ZONE NOT NULL COMMENT 'A timestamp when the book is created.'
);
COMMENT ON TABLE books IS 'Book';
CREATE INDEX BOOKS_NAME_INDEX ON BOOKS (NAME);
CREATE INDEX BOOKS_CATEGORY_ID_INDEX ON BOOKS (CATEGORY_ID);
CREATE INDEX BOOKS_PUBLICATION_DATE_INDEX ON BOOKS (PUBLICATION_DATE);
CREATE INDEX BOOKS_CREATED_AT_INDEX ON BOOKS (CREATED_AT);

DROP TABLE IF EXISTS BOOK_AUTHORS CASCADE;
CREATE TABLE BOOK_AUTHORS
(
    ID          IDENTITY     NOT NULL COMMENT 'A surrogate primary key id, instead of the name.' PRIMARY KEY,
    FIRSTNAME   VARCHAR(150) NOT NULL COMMENT 'The first name of the book author.',
    MIDDLE_NAME VARCHAR(150) NULL COMMENT 'The middle name of the book author.',
    LASTNAME    VARCHAR(150) NOT NULL COMMENT 'The last name of the book author.',
    CREATED_AT  TIMESTAMP(9) WITHOUT TIME ZONE NOT NULL COMMENT 'A timestamp when the book author is created.'
);
COMMENT ON TABLE BOOK_AUTHORS IS 'Book author';
CREATE INDEX BOOK_AUTHORS_FIRSTNAME_INDEX ON BOOK_AUTHORS (FIRSTNAME);
CREATE INDEX BOOK_AUTHORS_LASTNAME_INDEX ON BOOK_AUTHORS (LASTNAME);
CREATE INDEX BOOK_AUTHORS_CREATED_AT_INDEX ON BOOK_AUTHORS (CREATED_AT);

CREATE TABLE BOOKS_BOOKS_AUTHORS
(
    BOOK_ID   INTEGER NOT NULL COMMENT 'The id of the book.',
    AUTHOR_ID INTEGER NOT NULL COMMENT 'The id of the author.'
);
CREATE INDEX BOOK_AUTHORS_BOOK_ID_AUTHOR_ID ON BOOKS_BOOKS_AUTHORS (BOOK_ID, AUTHOR_ID);
